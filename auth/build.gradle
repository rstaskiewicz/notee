import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.bmuschko.docker-remote-api' version '5.2.0'
}

group 'com.gitlab.lamapizama'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security.oauth:spring-security-oauth2:2.3.7.RELEASE'
    implementation 'org.springframework.security:spring-security-jwt:1.0.11.RELEASE'

    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
}

task createDockerfile(type: Dockerfile, dependsOn: build) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8-jre-alpine'
    label(['maintainer': 'Rafał Staśkiewicz "rstaskiewicz1@gmail.com"'])
    copyFile jar.archiveFileName.get(), "app/${jar.archiveFileName.get()}"
    entryPoint 'java'
    defaultCommand '-jar', "app/${jar.archiveFileName.get()}"
    exposePort 8080
    runCommand 'apk --update --no-cache add curl'
    instruction 'HEALTHCHECK CMD curl -f http://localhost:8081/health || exit 1'
}

task syncAppArchive(type: Sync, dependsOn: build) {
    from "build/libs/${jar.archiveFileName.get()}"
    into createDockerfile.getDestDir().get()
}

createDockerfile.dependsOn syncAppArchive

task buildDockerImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    inputDir = createDockerfile.getDestDir()
    tags.add "${project.name}:${version}"
    tags.add "${project.name}:latest"
}
